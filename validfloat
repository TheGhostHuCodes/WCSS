#!/bin/bash

# validfloat -- Tests whether a number is a valid floating-point value. Note
# that this script cannot accept scientific (1.304e5) notation.

# To test whether an entered value is a valid floating-point number, we need to
# split the value into two parts: the integer portion and the fractional
# portion. We test the first part to see whether it's a valid integer, and then
# we test whether the second part is a valid >=0 integer. So -30.5 evaluates as
# valid, but -30i.-8 doesn't.

# To include another shell script as part of this one, use the "." source
# notation.

. validint

validfloat() {
    fvalue="$1"

    # Check whether the input number has a decimal point.
    # shellcheck disable=SC2001
    #                                   match "not a decimal point".
    #                                   vv
    if [ -n "$(echo "$fvalue" | sed 's/[^.]//g')" ]; then
        # Extract the digits before the decimal point.
        decimal_part="$(echo "$fvalue" | cut -d. -f1)"
        # Extract the digits after the decimal point.
        #                          prefix remove up-to and including period.
        #                          vv
        fractional_part="${fvalue#*\.}"

        # Start by testing the decimal part, which is everything to the left of
        # the decimal point.
        if [ -n "$decimal_part" ]; then
            if ! validint "$decimal_part" "" ""; then
                return 1
            fi
        fi

        # Now let's test the fractional part.

        # To start, you can't have a negative sign after the decimal point like
        # 33.-11, so let's test for the '-' sign in the decimal.
        if [ "${fractional_part%${fractional_part#?}}" = "-" ]; then
            echo "Invalid floating-point number: '-' not allowed after decimal point." >&2
            return 1
        fi
        if [ "$fractional_part" != "" ]; then
            # If the fractional part is NOT a valid integer...
            if ! validint "$fractional_part" "0" ""; then
                return 1
            fi
        fi
    else
        # If the entire value is just "-", that's not good either.
        if [ "$fvalue" = "-" ]; then
            echo "Invalid floating-point format." >&2
            return 1
        fi

        # Finally, check that the remaining digits are actually valid as
        # integers.
        if ! validint "$fvalue" "" ""; then
            return 1
        fi
    fi
    return 0
}

if [ "${BASH_SOURCE[0]}" = "$0" ]; then
    if validfloat "$1"; then
        echo "$1 is a valid floating-point value."
    fi

    exit 0
fi
